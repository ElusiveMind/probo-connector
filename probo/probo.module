<?php

/**
 * @file
 * Contains probo.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_theme().
 */
function probo_theme($existing, $type, $theme, $path) {
  return [
    'probo_active_build_block' => [
      'variables' => [
        'title_label' => NULL, 'title_tag' => NULL, 'title_text_class' => NULL, 
        'title_anchor_class' => NULL, 'title_links_to' => NULL,
        'repository_label' => NULL, 'repository_tag' => NULL,
        'repository' => NULL, 'repository_class' => NULL, 'repository_anchor' => NULL,
        'pull_request_label' => NULL, 'pull_request_tag' => NULL,
        'pull_request' => NULL, 'pull_request_class' => NULL, 'pull_request_anchor' => NULL,
        'probo_label' => NULL, 'probo_tag' => NULL,
        'probo_class' => NULL, 'probo_anchor' => NULL, 'builds' => [], 'probo_builds_domain' => NULL],
      'template' => 'probo-active-build-block',
    ],
    'probo_build_details' => [
      'variables' => ['build_id' => NULL, 'build' => [], 'tasks' => []],
      'template' => 'probo-build-details',
    ],
    'probo_task_details' => [
      'variables' => ['build_id' => NULL, 'task_id' => NULL, 'plugin' => NULL, 'event_name' => NULL, 
        'body' => NULL, 'timestamp' => NULL, 'pull_request_name' => NULL, 'owner' => NULL, 'repository' => NULL,
        'service' => NULL, 'pull_request_url' => NULL],
      'template' => 'probo-task-details',
    ],
    'probo_bitbucket_instructions' => [
      'template' => 'probo-bitbucket-instructions'
    ],
    'probo_configuration_display' => [
      'variables' => ['client_key' => NULL, 'client_secret' => NULL, 'access_token' => NULL, 'refresh_token' => NULL],
      'template' => 'probo-bitbucket-configuration-display',
    ],
  ];
}

/**
 * Implements hook_help().
 */
function probo_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the probo module.
    case 'help.page.probo':
      $bitbucket_instructions = \Drupal::url('probo.pbbcg_instructions');
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module integrates with the Probo Open Source server that can be installed via Docker or 
          as a stand-alone service. You can get more information on this by visiting the Probo web site at <a href="https://probo.ci">https://probo.ci</a>.
          For information on the Docker install you can visit the <a href="https://github.com/ElusiveMind/probo-docker">Github project</a>.
          There you will find information for configuring the Probo Open Source Docker Server via <a href="https://github.com/ElusiveMind/probo-docker/wiki">wiki</a>.<br /><br />
          Special instructions are required for configuring your server for BitBucket and the helper tool is now available via this
          module. For information on configuring BitBucket for your server <a href=":pbbcg">click here</a>.',[':pbbcg' => $bitbucket_instructions]) . '</p>';
      return $output;
    default:
  }
}

/**
 * Implements hook_cron().
 */
function probo_cron() {
  // Load our configuration variables for this module. If no domain is configured,
  // then we cannot run cron.
  $config = \Drupal::configFactory()->getEditable('probo.probosettings');
  $domain = $config->get('probo_builds_domain');
  if (empty($domain)) {
    return;
  }

  // Check for reaped builds. If we have them, then mark them as inactive.
  $query = \Drupal::database()->select('probo_builds', 'pb')
    ->fields('pb', ['bid'])
    ->condition('active', 1)
    ->distinct();
  $build_objects = $query->execute()->fetchAllAssoc('bid');
    
  // Assemble the build id's into an array to be iterated through in the template.
  foreach ($build_objects as $build_object) {
    $build_id = $build_object->bid;

    $url = 'http://' . $build_id . '.' . $domain;
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_HEADER, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $response = curl_exec($ch);
    $headers = curl_getinfo($ch, CURLINFO_HTTP_CODE);

    curl_close($ch);

    if (strpos($response, 'Build has been reaped')) {
      $query = \Drupal::database()->update('probo_builds')
        ->condition('bid', $build_id)
        ->fields([
          'active' => 0
        ])
        ->execute();
      continue;
    }
    
    // Proxy errors are grounds for deletion.
    // This needs to be fleshed out to more gracefully handle errors
    // as we need to be able to debug errors via the drupal module if they
    // occur not instantly delete them so they cannot be debuged.
    // Therefore we should likely only delete items that have been reaped.
    if (strpos($response, 'Proxy error:') || strpos($headers, '404')) {
      if (!strpos($response, 'Build is still in progress')) {
        $query = \Drupal::database()->delete('probo_builds');
        $query->condition('bid', $build_id);
        $query->execute();

        $query = \Drupal::database()->delete('probo_tasks');
        $query->condition('bid', $build_id);
        $query->execute();
      }
    }
  }
  drupal_flush_all_caches();
}